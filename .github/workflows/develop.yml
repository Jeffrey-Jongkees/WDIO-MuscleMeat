name: Web Driver IO 

on:
 push:
  branches:
  - Develop

jobs:
 
 Login-Muscle-Meat:
   runs-on: ubuntu-latest
   environment: testing

   steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Create results directory
      run: mkdir -p _results_/allure-report

    - name: Install dependencies
      run: npm install

    - name: Set Execute Permission for wdio Binary
      run: chmod +x ./node_modules/.bin/wdio
    
    - name: Run musclemeat login test!
      env:
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        MM_PASSWORD: ${{ secrets.MM_PASSWORD }}
      run: npm run gitHubActions

    - name: Generate Allure Report
      run: |
        npm install -g allure-commandline  # install allure command line tool
        allure generate ./_results_/ -o ./_results_/allure-report/ --clean

    - name: Upload Allure Report
      uses: actions/upload-artifact@v2
      with:
        name: allure-report
        path: _results_/allure-report/
  
    - name: Upload video
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Login-Muscle-Meat
        path: ./_results_/

 Obtaining-musclemeat-results-video:
    runs-on: ubuntu-latest
    needs: Login-Muscle-Meat

    steps:
      - name: Download video
        uses: actions/download-artifact@v3
        with:
          name: Login-Muscle-Meat
          
      - name: Display structure of downloaded files
        run: ls -R

      # - name: Set up a local web server and open Allure report
      #   run: |
      #     # Navigate to the directory containing the Allure report
      #     cd _results_/allure-report

      #     # Start a local web server to serve the report
      #     python -m http.server 8000 &

      #     # Wait for the server to start
      #     sleep 5

      #     # Open the Allure report in the default web browser
      #     xdg-open http://localhost:8000/index.html

